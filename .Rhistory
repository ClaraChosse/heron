usethis::use_r("demi_perimetre")
usethis::use_r("heron")
usethis::use_test("demi_perimetre")
usethis::use_test("heron")
test_that("la fonction demi_perimetre retourne la valeur attendue", {
expect_equal(demi_perimetre(3, 4, 5), 6)
})
library(testthat)
test_that("la fonction demi_perimetre retourne la valeur attendue", {
expect_equal(demi_perimetre(3, 4, 5), 6)
})
test_that("la fonction demi_perimetre retourne la valeur attendue", {
expect_equal(demi_perimetre(10, 10, 10), 15)
})
test_that("la fonction demi_perimetre retourne la valeur attendue", {
expect_equal(demi_perimetre(6, 8, 8), 11)
})
test_that("demi_perimetre génère une erreur pour des arugments non numériques", {
expect_error(demi_perimetre("a", 4, 5), "Tous les arguments doivent être numériques")
})
test_that("la fonction heron retourne un message d'erreur pour une valeur negative", {
expect_error(demi_perimetre(3, 4, -5), "Toutes les valeurs doivent être positives")
})
#' @param b La taille du deuxième coté du triangle
#' @param c La taille du troisième coté du triangle
#'
#' @return Cette fonction retourne le demi-périmètre du triangle
#'
#' @examples
#' demi_perimetre(3,4,5)
#' Output : 6
#'
#' @noRd
demi_perimetre <- function(a, b, c) {
if (!is.numeric(a) || !is.numeric(b) || !is.numeric(c)) {
stop("Tous les arguments doivent être numériques")
}
if (a < 0 || b < 0 || c < 0) {
stop("Toutes les valeurs doivent être positives")
}
if (a == 0 || b == 0 || c == 0) {
warning("Une des valeurs est egale a 0")
}
(a + b + c) / 2
}
#'
#' @return Cette fonction retourne l'aire du triangle
#' @export
#'
#' @examples
#' heron(3,4,5)
#' Output : 6
#'
#' heron(4,7,9)
#' Output : 13,42
heron <- function(a, b, c) {
if (!is.numeric(a) || !is.numeric(b) || !is.numeric(c)) {
stop("Tous les arguments doivent être numériques")
}
if (a < 0 || b < 0 || c < 0) {
stop("Toutes les valeurs doivent être positives")
}
if (a == 0 || b == 0 || c == 0) {
warning("Une des valeurs est egale a 0")
}
s <- (a + b + c) / 2
sqrt(s * (s - a) * (s - b) * (s - c))
}
test_that("la fonction demi_perimetre retourne la valeur attendue", {
expect_equal(demi_perimetre(3, 4, 5), 6)
})
test_that("la fonction demi_perimetre retourne la valeur attendue", {
expect_equal(demi_perimetre(10, 10, 10), 15)
})
test_that("la fonction demi_perimetre retourne la valeur attendue", {
expect_equal(demi_perimetre(6, 8, 8), 11)
})
test_that("demi_perimetre génère une erreur pour des arugments non numériques", {
expect_error(demi_perimetre("a", 4, 5), "Tous les arguments doivent être numériques")
})
test_that("la fonction heron retourne un message d'erreur pour une valeur negative", {
expect_error(demi_perimetre(3, 4, -5), "Toutes les valeurs doivent être positives")
})
test_that("la fonction heron donne le bon resultat", {
expect_equal(heron(3, 4, 5), 6)
})
test_that("la fonction heron donne le bon resultat", {
expect_equal(round(heron(7, 9, 9),2), 29.02)
})
test_that("la fonction heron donne le bon resultat", {
expect_equal(round(heron(8, 7, 5),2), 17.32)
})
test_that("la fonction heron retourne un message d'erreur pour une valeur non numérique", {
expect_error(heron("a", 4, 5), "Tous les arguments doivent être numériques")
})
test_that("la fonction heron retourne un message d'erreur pour une valeur negative", {
expect_error(heron(3, 4, -5), "Toutes les valeurs doivent être positives")
})
test_that("la fonction heron retourne un avertissement pour une valeur egale a 0", {
expect_warning(heron(3, 4, 0), "Une des valeurs est egale a 0")
})
devtools::load_all()
devtools::document()
library(heron)
?heron
install.packages(heron)
devtools::install()
devtools::load_all()
devtools::test()
devtools::document()
devtools::install()
git push origin master
remotes::install_github("ClaraChosse/heron")
library(heron)
heron(4,5,6)
installed.packages()
installed.packages(heron)
installed.packages("heron")
remotes::install_github("ClaraChosse/heron")
